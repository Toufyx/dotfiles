# Configuration for Alacritty, the GPU enhanced terminal emulator.

env:
  TERM: xterm-256color

window:
  dimensions:
    columns: 120
    lines: 40
  padding:
    x: 8
    y: 8
  dynamic_padding: false
  decorations: none
  title: Alacritty

scrolling:
  history: 10000
  multiplier: 3
  faux_multiplier: 3
  auto_scroll: false

tabspaces: 4

font:
  size: 11.0
  normal:
    family: 'Droid Sans Mono Slashed for Powerline'
    style: Regular
  bold:
    family: 'Droid Sans Mono Slashed for Powerline'
    style: Bold
  italic:
    family: 'Droid Sans Mono Slashed for Powerline'
    style: Italic
    offset:
    x: 0
    y: 0
  glyph_offset:
    x: 0
    y: 0
  use_thin_strokes: true
  antialias: 'lcd'

draw_bold_text_with_bright_colors: true

colors:
  primary:
    background: '0x0F0F0F'
    foreground: '0xAFAFAF'
  cursor:
    text: '0x0F0F0F'
    cursor: '0xAFAFAF'
  selection:
    text: '0xAFAFAF'
    background: '0x2F2F2F'
  normal:
    black:   '0x1F1F1F'
    red:     '0xFB618E'
    green:   '0x7DD88B'
    yellow:  '0xFBE55D'
    blue:    '0x5ED4E7'
    magenta: '0xFC9350'
    cyan:    '0x5ED4E7'
    white:   '0xCFCFCF'
  bright:
    black:   '0x4F4F4F'
    red:     '0xFB618E'
    green:   '0x7DD88B'
    yellow:  '0xFBE55D'
    blue:    '0x5ED4E7'
    magenta: '0xFC9350'
    cyan:    '0x5ED4E7'
    white:   '0xCFCFCF'
  indexed_colors: []

visual_bell:
  animation: EaseOutExpo
  duration: 0
  color: '0xffffff'

background_opacity: 1.0

mouse_bindings:
  - { mouse: Middle, action: PasteSelection }

mouse:
  double_click: { threshold: 300 }
  triple_click: { threshold: 300 }
  hide_when_typing: false
  url:
    modifiers: None

selection:
  semantic_escape_chars: ",â”‚`|:\"' ()[]{}<>"
  save_to_clipboard: false

dynamic_title: true

cursor:
  style: Block
  unfocused_hollow: true

live_config_reload: true

shell:
  program: /bin/zsh
  args: []

working_directory: None

alt_send_esc: true

debug:
  render_timer: false
  persistent_logging: false
  log_level: Warn
  print_events: false
  ref_test: false

# Key bindings
#
# Key bindings are specified as a list of objects. Each binding will specify a
# key and modifiers required to trigger it, terminal modes where the binding is
# applicable, and what should be done when the key binding fires. It can either
# send a byte sequence to the running application (`chars`), execute a
# predefined action (`action`) or fork and execute a specified command plus
# arguments (`command`).
#
# Bindings are always filled by default, but will be replaced when a new binding
# with the same triggers is defined. To unset a default binding, it can be
# mapped to the `None` action.
#
# Example:
#   `- { key: V, mods: Control|Shift, action: Paste }`
#
# Available fields:
#   - key
#   - mods (optional)
#   - chars | action | command (exactly one required)
#   - mode (optional)
#
# Values for `key`:
#   - `A` -> `Z`
#   - `F1` -> `F12`
#   - `Key1` -> `Key0`
#
#   A full list with available key codes can be found here:
#   https://docs.rs/glutin/*/glutin/enum.VirtualKeyCode.html#variants
#
#   Instead of using the name of the keys, the `key` field also supports using
#   the scancode of the desired key. Scancodes have to be specified as a
#   decimal number.
#   This command will allow you to display the hex scancodes for certain keys:
#     `showkey --scancodes`
#
# Values for `mods`:
#   - Command
#   - Control
#   - Option
#   - Super
#   - Shift
#   - Alt
#
#   Multiple `mods` can be combined using `|` like this: `mods: Control|Shift`.
#   Whitespace and capitalization is relevant and must match the example.
#
# Values for `chars`:
#   The `chars` field writes the specified string to the terminal. This makes
#   it possible to pass escape sequences.
#   To find escape codes for bindings like `PageUp` ("\x1b[5~"), you can run
#   the command `showkey -a` outside of tmux.
#   Note that applications use terminfo to map escape sequences back to
#   keys. It is therefore required to update the terminfo when
#   changing an escape sequence.
#
# Values for `action`:
#   - Paste
#   - PasteSelection
#   - Copy
#   - IncreaseFontSize
#   - DecreaseFontSize
#   - ResetFontSize
#   - ScrollPageUp
#   - ScrollPageDown
#   - ScrollLineUp
#   - ScrollLineDown
#   - ScrollToTop
#   - ScrollToBottom
#   - ClearHistory
#   - Hide
#   - Quit
#   - ClearLogNotice
#   - SpawnNewInstance
#   - ToggleFullscreen
#   - None
#
# Values for `action` (macOS only):
#   - ToggleSimpleFullscreen: Enters fullscreen without occupying another space
#
# Values for `command`:
#   The `command` field must be a map containing a `program` string and
#   an `args` array of command line parameter strings.
#
#   Example:
#       `command: { program: "alacritty", args: ["-e", "vttest"] }`
#
# Values for `mode`:
#   - ~AppCursor
#   - AppCursor
#   - ~AppKeypad
#   - AppKeypad
key_bindings:

  # (macOS only)
  - { key: Key0,   mods: Command,         action: ResetFontSize    }
  - { key: Add,    mods: Command,         action: IncreaseFontSize }
  - { key: Minus,  mods: Command,         action: DecreaseFontSize }
  - { key: K,      mods: Command,         action: ClearHistory     }
  - { key: V,      mods: Command,         action: Paste            }
  - { key: C,      mods: Command,         action: Copy             }
  - { key: H,      mods: Command,         action: Hide             }
  - { key: Q,      mods: Command,         action: Quit             }
  - { key: W,      mods: Command,         action: Quit             }


  # check - https://github.com/jwilm/alacritty/wiki/Keyboard-mappings
  - { key: N,         mods: Command,          action: SpawnNewInstance       }
  - { key: Space,     mods: Alt,              chars: " "                     }
  - { key: Equals,    mods: Command,          action: DecreaseFontSize       }
  - { key: Equals,    mods: Command|Shift,    action: IncreaseFontSize       }
  - { key: N,         mods: Alt,              chars: "~"                     }
  - { key: LBracket,  mods: Alt,              chars: "{"                     }
  - { key: RBracket,  mods: Alt,              chars: "}"                     }
  - { key: LBracket,  mods: Alt|Shift,        chars: "["                     }
  - { key: RBracket,  mods: Alt|Shift,        chars: "]"                     }
  - { key: 37,        mods: Alt|Shift,        chars: "|"                     }
  - { key: 47,        mods: Alt|Shift,        chars: "\\"                    }

  # (general bindings)
  - { key: Paste,                   action: Paste                            }
  - { key: Copy,                    action: Copy                             }
  - { key: PageUp,   mods: Shift,   action: ScrollPageUp,   mode: ~Alt       }
  - { key: PageDown, mods: Shift,   action: ScrollPageDown, mode: ~Alt       }
  - { key: Left,     mods: Shift,   chars: "\x1b[1;2D"                       }
  - { key: Left,     mods: Control, chars: "\x1b[1;5D"                       }
  - { key: Left,     mods: Alt,     chars: "\x1b[1;3D"                       }
  - { key: Left,                    chars: "\x1b[D",        mode: ~AppCursor }
  - { key: Left,                    chars: "\x1bOD",        mode: AppCursor  }
  - { key: Right,    mods: Shift,   chars: "\x1b[1;2C"                       }
  - { key: Right,    mods: Control, chars: "\x1b[1;5C"                       }
  - { key: Right,    mods: Alt,     chars: "\x1b[1;3C"                       }
  - { key: Right,                   chars: "\x1b[C",        mode: ~AppCursor }
  - { key: Right,                   chars: "\x1bOC",        mode: AppCursor  }
  - { key: Up,       mods: Shift,   chars: "\x1b[1;2A"                       }
  - { key: Up,       mods: Control, chars: "\x1b[1;5A"                       }
  - { key: Up,       mods: Alt,     chars: "\x1b[1;3A"                       }
  - { key: Up,                      chars: "\x1b[A",        mode: ~AppCursor }
  - { key: Up,                      chars: "\x1bOA",        mode: AppCursor  }
  - { key: Down,     mods: Shift,   chars: "\x1b[1;2B"                       }
  - { key: Down,     mods: Control, chars: "\x1b[1;5B"                       }
  - { key: Down,     mods: Alt,     chars: "\x1b[1;3B"                       }
  - { key: Down,                    chars: "\x1b[B",        mode: ~AppCursor }
  - { key: Down,                    chars: "\x1bOB",        mode: AppCursor  }
